🧠 Self-Teaching App Generation Prompt
I want to build a self-learning web app to teach myself university-level courses like Differential Equations.
The app should be built using Next.js 14 (App Router) and Tailwind CSS, and it will use Gemini Pro (via Google AI API) for generating structured learning content.

Here are the exact features and structure I need — build this from start to finish:

🧱 Stack
Next.js App Router

Tailwind CSS

Typescript

@google/generative-ai to call Gemini Pro

Store generated data in localStorage

📚 App Overview
A sidebar-based course app that helps users learn one topic at a time. On first click of a unit, Gemini generates its subtopics. On first click of a subtopic, Gemini generates a mini textbook page.

🖼 Layout
Sidebar on the left: shows a hardcoded course outline of units (e.g., “First-Order Differential Equations”).

When a unit is clicked: fetch subtopics using Gemini with the following prompt:

vbnet
Copy
Edit
I'm studying a course on [unit title].
Generate a pedagogically logical list of subtopics that build conceptual understanding step-by-step.

Use this format exactly, with no bullets, markdown, or numbering:

Subtopic Title ||| One-line concise description
When a subtopic is clicked: show a textbook-style page generated by Gemini using this prompt:

vbnet
Copy
Edit
I'm studying a course on [course title].
Please write a brief textbook-style explanation of the subtopic "[subtopic title]", which falls under the unit "[unit title]".

The response should be structured in plain text using the following format:

Definition:
<One short paragraph>

Method:
<One short paragraph>

Example:
<Complete worked example with steps and final answer>

Do not use markdown or any extra formatting. Just return clean text with those section headers.
⚙️ Functional Requirements
Cache subtopics and subtopic content in localStorage to avoid duplicate API calls.

Use loading spinners or messages while fetching.

Allow only one chat panel per subtopic page to ask deeper questions via Gemini.

Use /api/generate-subtopics and /api/generate-subtopic-page routes.

Provide a “Reset Cache” button to clear localStorage per unit or globally.

✍️ Optional Features (future-ready)
Practice questions: toggleable Q&A generated per subtopic via Gemini

Multi-user login with Supabase (for future)

🧪 Testing & Dev Notes
Assume environment variable GOOGLE_API_KEY is set in .env.local

Use @google/generative-ai to connect to Gemini Pro with gemini-1.5-flash

Include utility to clean malformed Gemini responses (e.g., extra markdown)

🧭 Deliverables
All routes and components wired and working

Initial hardcoded course outline (Differential Equations)

Example: “First-Order Differential Equations” → generates 10 subtopics

Each subtopic page includes Gemini-generated textbook explanation

Please create all code files and folders required — from pages to API routes to reusable components.